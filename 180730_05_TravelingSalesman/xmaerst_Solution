#include <stdio.h>
#define min(a, b) (a < b ? a : b)

int dp[17][1 << 17] = { 0 };
int W[17][17] = { 0 };
int N; // N은 도시의 수를 뜻하는 것(2<=N<=16)
int TS(int cur, int state) // TS는 Traveling Salesman(외판원 순회)의 약자로 쓴 것, cur은 현재 도시(마지막으로 방문한 도시? 마지막으로 현재 방문하고 있는 도시), state는 현재 상태(이미 방문한 도시들의 집합)를 뜻하는 것
			    // 외판원의 순회에 필요한 최소 비용을 출력(방문하지 않은 나머지 도시들을 모두 방문한 뒤 출발 도시로 돌아올 때 드는 최소 비용을 출력)
{
	if(dp[cur][state] != -1) // dp에 해당 값이 있으면(dp[cur][state]가 이미 방문하였다면 return)
				 // 이전에 방문한 케이스의 도시의 경우 바로 return
	{
		return dp[cur][state];
	}
	if(state == (1 << N) - 1) // 모든 도시를 방문하였으면(모든 도시를 거친 경우)
				  // 모든 도시를 모두 방문하고 마지막으로 출발 도시로 돌아왔을 때
	{
		if(W[cur][0] != 0) return W[cur][0];
		else return 987654321;
	}
	dp[cur][state] = 987654321;
	for(int i = 0; i < N; i++)
	{
		if(((state&(1 << i)) == 0) && (W[cur][i] != 0)) // 방문한 적이 없거나, 길이 있을 경우(i가 cur이 아니고, i번 도시를 아직 거치지 않았고, 현재 도시에서 i로 가는 길이 있는 경우)
								// 방문한 도시가 아니고, 길이 있는 경우
		{
			dp[cur][state] = min(dp[cur][state], TS(i, (state | (1 << i))) + W[cur][i]); // (state | (1 << i))는 i번째 도시 방문을 뜻하는 것
												     // 다음 도시들을 선택하여 방문하였을 때 가장 적은 비용이 드는 길을 선택
		}
	}
	return dp[cur][state]; // dp에 결과를 저장하고 return
}
int main()
{
	scanf("%d", &N);
	for(int i = 0; i < N; i++)
	{
		for(int j = 0; j < N; j++)
		{
			scanf("%d", &W[i][j]);
		}
	}
	memset(dp, -1, sizeof(dp));
	printf("%d\n", TS(0, 1));
	return 0;
}
