#include    <iostream>
using namespace std;
 
struct room
{
    int num;
    int start;//시작하는 시간
    int end;//끝나는 시간
};
 
room meetingRoom[555];
 
int partition(room* arr, int start, int end)
{
    int pivot = arr[start].end;
    int left = start;
    int right = end;
 
    while (left <= right)
    {
        while (left <= end && arr[left].end <= pivot)
            left++;
        while (right >= start + 1 && arr[right].end >= pivot)
            right--;
 
        if (left <= right)
            swap(arr[left], arr[right]);
    }
    swap(arr[start], arr[right]);
    return right;
}
 
void quickSort(room *arr, int start, int end)
{
    if (start < end)
    {
        int pivot = partition(arr, start, end);
        quickSort(arr, pivot + 1, end);
        quickSort(arr, start, pivot - 1);
    }
}
 
int queue[555];
int front = 0;
int rear = 0;
 
int main()
{
    ios::sync_with_stdio(false);
    int N;
    cin >> N;
 
    for (int i = 1; i <= N; ++i)
        cin >> meetingRoom[i].num >> meetingRoom[i].start >> meetingRoom[i].end;
 
    quickSort(meetingRoom, 1, N);//끝나는 시간이 가장 먼저인 것 부터 정렬
 
    int curEnd = 0;//현재까지 배정한 회의 중 마지막으로 끝나는 시간을 저장
    
    int numOfMeeting = 0;
    for (int i = 1; i <= N; ++i)
    {
        if (curEnd <= meetingRoom[i].start)//가장 먼저 끝나는 회의를 차례대로 겹치지 않게 선택
        {
            queue[++rear] = meetingRoom[i].num;
            curEnd = meetingRoom[i].end;
            numOfMeeting++;
        }
    }
 
    cout << numOfMeeting << endl;
    while (front < rear)
    {
        cout << queue[++front] << " ";
    }
    return 0;
}
