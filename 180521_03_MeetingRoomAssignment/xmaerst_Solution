#include <stdio.h>
#include <stdlib.h>

typedef struct time
{
	int start, end;
} time;
int cmp(time *a, time *b)
{
	// 오름차순 1
	return a->end > b->end ? 1 : a->end < b->end ? -1 : a->start > b->start ? 1 : a->start < b->start ? -1 : 0;
	/*
	위 식이 뜻하는 것은
	if(((time*)a)->end > ((time*)b)->end) return 1;
	else if(((time*)a)->end < ((time*)b)->end) return -1;
	else if(((time*)a)->start > ((time*)b)->start) return 1;
	else if(((time*)a)->start < ((time*)b)->start) return -1;
	else return 0;
	이 식이다.
	*/
	/*
	// 오름차순 2
	if(((time*)a)->end > ((time*)b)->end) return 1;
	else if(((time*)a)->end == ((time*)b)->end)
	{
		if(((time*)a)->start > ((time*)b)->start) return 1;
		else return 0;
	}
	else return -1;
	*/
	/*
	// 오름차순
	return *a > *b ? 1 : (*a < *b ? -1 : 0);
	/-
	위 식이 뜻하는 것은
	if(*a > *b) return 1;
	else if(*a < *b) return -1;
	else return 0;
	이 식이다.
	-/
	*/
}
int main()
{
	int N;
	time meeting[100001];
	scanf("%d", &N);
	for(int i = 0; i < N; i++)
	{
		scanf("%d %d", &meeting[i].start, &meeting[i].end);
	}
	// 오름차순 정렬, 만약 끝나는 시간이 같으면 시작 시간이 작은 순으로
	qsort(meeting, N, 8, cmp); // 8이 뜻하는 것은 sizeof(struct time)의 값이다.
	int now = meeting[0].end;
	int max = 1;
	for(int i = 1; i < N; i++)
	{
		if(meeting[i].start >= now)
		{
			now = meeting[i].end;
			max++;
		}
	}
	printf("%d\n", max);
	return 0;
}
